<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="Misc_8cpp" kind="file" language="C++">
    <compoundname>Misc.cpp</compoundname>
    <includes refid="Misc_8h" local="yes">Misc.h</includes>
    <incdepgraph>
      <node id="5947">
        <label>ComGraphics/Source/Misc.cpp</label>
        <link refid="Misc.cpp"/>
        <childnode refid="5948" relation="include">
        </childnode>
      </node>
      <node id="5950">
        <label>MyMath.h</label>
        <link refid="MyMath_8h"/>
        <childnode refid="5951" relation="include">
        </childnode>
        <childnode refid="5952" relation="include">
        </childnode>
        <childnode refid="5953" relation="include">
        </childnode>
        <childnode refid="5954" relation="include">
        </childnode>
      </node>
      <node id="5951">
        <label>cmath</label>
      </node>
      <node id="5949">
        <label>Vector3.h</label>
        <link refid="Vector3_8h"/>
        <childnode refid="5950" relation="include">
        </childnode>
        <childnode refid="5955" relation="include">
        </childnode>
      </node>
      <node id="5952">
        <label>exception</label>
      </node>
      <node id="5948">
        <label>Misc.h</label>
        <link refid="Misc_8h"/>
        <childnode refid="5949" relation="include">
        </childnode>
      </node>
      <node id="5953">
        <label>ctime</label>
      </node>
      <node id="5954">
        <label>cstdlib</label>
      </node>
      <node id="5955">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="Misc_8cpp_1a15f09d45e07d38822b5ecf228e503e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getAngle</definition>
        <argsstring>(const Vector3 &amp;view, const Vector3 &amp;target)</argsstring>
        <name>getAngle</name>
        <param>
          <type>const <ref refid="structVector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>view</declname>
        </param>
        <param>
          <type>const <ref refid="structVector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ComGraphics/Source/Misc.cpp" line="11" column="1" bodyfile="ComGraphics/Source/Misc.cpp" bodystart="11" bodyend="20"/>
        <references refid="namespaceMath_1a1a1d364c850f9d66fda85cf71598bbe5" compoundref="MyMath_8h" startline="64" endline="67">Math::RadianToDegree</references>
        <references refid="structVector3_1a7e2d3237b29a2f29d7b3d8b2934e35f2" compoundref="Vector3_8h" startline="27">Vector3::x</references>
        <references refid="structVector3_1a86eb35a9fa2d5a49e7fad66a35fa9c13" compoundref="Vector3_8h" startline="27">Vector3::y</references>
        <references refid="structVector3_1aa8c9461eb24bd2c364258078811a3e9d" compoundref="Vector3_8h" startline="27">Vector3::z</references>
        <referencedby refid="classmisc_1af425955855ed4c3d4f09621afdf11785" compoundref="Misc_8cpp" startline="22" endline="38">misc::hitting</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Misc_8h" kindref="compound">Misc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2" refid="classmisc_1a49469fb4e803e779cd3b63531d59a9d5" refkind="member"><highlight class="normal"><ref refid="classmisc_1a49469fb4e803e779cd3b63531d59a9d5" kindref="member">misc::misc</ref>()</highlight></codeline>
<codeline lineno="3"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6" refid="classmisc_1ae3266418d93ee3ea5a16ac291fb43e3d" refkind="member"><highlight class="normal"><ref refid="classmisc_1ae3266418d93ee3ea5a16ac291fb43e3d" kindref="member">misc::~misc</ref>()</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="Misc_8cpp_1a15f09d45e07d38822b5ecf228e503e36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="Misc_8cpp_1a15f09d45e07d38822b5ecf228e503e36" kindref="member">getAngle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structVector3" kindref="compound">Vector3</ref><sp/>&amp;view,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structVector3" kindref="compound">Vector3</ref><sp/>&amp;target)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MagnitudeA<sp/>=<sp/>sqrt(pow(view.<ref refid="structVector3_1a7e2d3237b29a2f29d7b3d8b2934e35f2" kindref="member">x</ref>,<sp/>2)<sp/>+<sp/>pow(view.<ref refid="structVector3_1a86eb35a9fa2d5a49e7fad66a35fa9c13" kindref="member">y</ref>,<sp/>2)<sp/>+<sp/>pow(view.<ref refid="structVector3_1aa8c9461eb24bd2c364258078811a3e9d" kindref="member">z</ref>,<sp/>2));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MagnitudeB<sp/>=<sp/>sqrt(pow(target.<ref refid="structVector3_1a7e2d3237b29a2f29d7b3d8b2934e35f2" kindref="member">x</ref>,<sp/>2)<sp/>+<sp/>pow(target.<ref refid="structVector3_1a86eb35a9fa2d5a49e7fad66a35fa9c13" kindref="member">y</ref>,<sp/>2)<sp/>+<sp/>pow(target.<ref refid="structVector3_1aa8c9461eb24bd2c364258078811a3e9d" kindref="member">z</ref>,<sp/>2));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dotProduct<sp/>=<sp/>view.<ref refid="structVector3_1a7e2d3237b29a2f29d7b3d8b2934e35f2" kindref="member">x</ref><sp/>*<sp/>target.<ref refid="structVector3_1a7e2d3237b29a2f29d7b3d8b2934e35f2" kindref="member">x</ref><sp/>+<sp/>view.<ref refid="structVector3_1a86eb35a9fa2d5a49e7fad66a35fa9c13" kindref="member">y</ref><sp/>*<sp/>target.<ref refid="structVector3_1a86eb35a9fa2d5a49e7fad66a35fa9c13" kindref="member">y</ref><sp/>+<sp/>view.<ref refid="structVector3_1aa8c9461eb24bd2c364258078811a3e9d" kindref="member">z</ref><sp/>*<sp/>target.<ref refid="structVector3_1aa8c9461eb24bd2c364258078811a3e9d" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>acos(dotProduct<sp/>/<sp/>(MagnitudeA<sp/>*<sp/>MagnitudeB));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceMath_1a1a1d364c850f9d66fda85cf71598bbe5" kindref="member">Math::RadianToDegree</ref>(angle);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classmisc_1af425955855ed4c3d4f09621afdf11785" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmisc_1af425955855ed4c3d4f09621afdf11785" kindref="member">misc::hitting</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mobx,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mobz,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>AOA,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>camX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>camZ,<sp/><ref refid="structVector3" kindref="compound">Vector3</ref><sp/>view,<sp/><ref refid="structVector3" kindref="compound">Vector3</ref><sp/>position)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>currDist<sp/>=<sp/>sqrt((camX<sp/>-<sp/>mobx)<sp/>*<sp/>(camX-<sp/>mobx)<sp/><sp/>+<sp/><sp/><sp/>(camZ<sp/>-<sp/>mobz)<sp/>*<sp/>(camZ<sp/>-<sp/>mobz));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currDist<sp/>&lt;=<sp/>distance)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="Misc_8cpp_1a15f09d45e07d38822b5ecf228e503e36" kindref="member">getAngle</ref>(view,<sp/><ref refid="structVector3" kindref="compound">Vector3</ref>(mobx,10,mobz)<sp/>-<sp/>position))<sp/>&lt;=<sp/>AOA)<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;target&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classmisc_1a0f8d72dfe38a0284899586da142daf8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmisc_1a0f8d72dfe38a0284899586da142daf8a" kindref="member">misc::WithinArea</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>smallx,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>largex,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>smallz,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>largez)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight><highlight class="comment">//checks<sp/>if<sp/>camera<sp/>is<sp/>within<sp/>a<sp/>certain<sp/>area<sp/>of<sp/>the<sp/>room.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classmisc_1afd385934888e7e21a9c3c178b7fd465d" kindref="member">camX</ref><sp/>&gt;=<sp/>smallx<sp/>&amp;&amp;<sp/>camX<sp/>&lt;=<sp/>largex<sp/>&amp;&amp;<sp/>camZ<sp/>&gt;=<sp/>smallz<sp/>&amp;&amp;<sp/><ref refid="classmisc_1a65813e82056f0e24ccf36088618001f1" kindref="member">camZ</ref><sp/>&lt;=<sp/>largez)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="ComGraphics/Source/Misc.cpp"/>
  </compounddef>
</doxygen>
